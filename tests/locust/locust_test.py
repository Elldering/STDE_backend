from locust import HttpUser, TaskSet, task, between, events
from faker import Faker
import random
import json
import matplotlib.pyplot as plt
from PIL import Image
import statistics

fake = Faker()

class ApiUserTasks(TaskSet):
    wait_time = between(1, 3)

    @task(1)
    def get_buckets(self):
        self.execute_test("GET Buckets", "/api/test-routes/s3/buckets", "GET")

    @task(2)
    def upload_file(self):
        files = {"file": ("test_file.txt", "Hello, World!", "text/plain")}
        key = f"/uploads/{fake.uuid4()}.txt"
        self.execute_test("Upload File", f"/api/test-routes/s3/upload{key}", "POST", files=files)

    @task(1)
    def delete_file(self):
        key = f"/uploads/{fake.uuid4()}.txt"
        self.execute_test("Delete File", f"/api/test-routes/s3/files{key}", "DELETE")

    @task(3)
    def get_reviews(self):
        self.execute_test("GET Reviews", "/api/test-routes/reviews/", "GET")

    @task(2)
    def post_review(self):
        data = {
            "auth_user_sender_id": 108,
            "auth_user_recipient_id": 108,
            "grade": random.randint(1, 5),
            "comment": fake.text(max_nb_chars=150),
        }
        self.execute_test("POST Review", "/api/test-routes/reviews/", "POST", data=json.dumps(data))

    @task(1)
    def get_user_group(self):
        group_id = random.randint(1, 20)  
        self.execute_test("GET User Group", f"/api/test-routes/user-groups/{group_id}", "GET")

    @task(2)
    def create_user_group(self):
        data = {"name": fake.company()}
        self.execute_test("POST User Group", "/api/test-routes/user-groups/", "POST", data=json.dumps(data))

    def execute_test(self, test_name, url, method, **kwargs):
        response = None
        try:
            if method == "GET":
                response = self.client.get(url)
            elif method == "POST":
                response = self.client.post(url, **kwargs, headers={"Content-Type": "application/json"})
            elif method == "DELETE":
                response = self.client.delete(url)

            status = "‚úîÔ∏è –£—Å–ø–µ—Ö" if response.status_code == 200 else f"‚ùå –û—à–∏–±–∫–∞ ({response.status_code})"
            print(f"[{test_name}] ‚Üí {status}")

            if response.status_code == 200:
                response_times.append(response.elapsed.total_seconds() * 1000)  # –í –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                successful_requests.append(test_name)
            else:
                failed_requests.append(test_name)
                failed_response_times.append(response.elapsed.total_seconds() * 1000)

        except Exception as e:
            print(f"[{test_name}] ‚ùå –û—à–∏–±–∫–∞: {e}")
            failed_requests.append(test_name)




class ApiUser(HttpUser):
    host = "http://localhost:8085"
    tasks = [ApiUserTasks]

response_times = []
failed_response_times = []
successful_requests = []
failed_requests = []

# @events.quitting.add_listener
# def on_quitting(environment, **kwargs):
#     print("\n========== –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é ==========")
#     print(f"–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(successful_requests)}")
#     print(f"–û—à–∏–±–æ–∫: {len(failed_requests)}")
    
#     if response_times:
#         avg_time = statistics.mean(response_times)
#         print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.2f} ms")
#         print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {max(response_times):.2f} ms")
#         print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {min(response_times):.2f} ms")

#     plt.figure(figsize=(14, 8))

#     plt.subplot(2, 1, 1)
#     plt.plot(response_times, label="–£—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", color="blue")
#     plt.plot(failed_response_times, label="–ù–µ—É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", color="red")
#     plt.xlabel("–ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞")
#     plt.ylabel("–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–º—Å)")
#     plt.title("–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤")
#     plt.legend()
#     plt.grid(True)

#     plt.subplot(2, 1, 2)
#     labels = ["–£—Å–ø–µ—à–Ω—ã–µ", "–ù–µ—É—Å–ø–µ—à–Ω—ã–µ"]
#     values = [len(successful_requests), len(failed_requests)]
#     plt.bar(labels, values, color=["green", "red"])
#     plt.title("–£—Å–ø–µ—Ö–∏ / –û—à–∏–±–∫–∏")
#     plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤")

#     plt.tight_layout()
#     plt.savefig("test_results.png")
#     plt.close()

#     try:
#         img = Image.open("test_results.png")
#         img.show()
#     except:
#         print("üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ test_results.png")
